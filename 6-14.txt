6-14
Moving Object
MovingObject 클래스 스크립트를 상속함으로 적과 플레이어를 움직이게 함
상속, generic(일반형) parameter(매개변수) <T>, override, GetComponent<>(), Coroutine, RaycastHit2D, Physics2D, Vector3, Vector2, Rigid Body 2D, Box Collider 2D,

public abstract class 로 변경
-> 클래스나 클래스 멤버들을 만들 때 기능을 완성하지 않아도 되게 하고, 해당 클래스는 반드시 파생클래스

public float moveTime = 0.1f; // 시간 단위. moveTime동안 오브젝트를 움직이게 함.
public LayerMask blockingLayer; // 이동할 공간이 열려있고, 그 곳으로 이동하려 할 때 충돌이 일어났는 지 체크하는 장소
-> Player, enemy, wall이 blockingLayer로 설정되어 있음

private Rigidbody2D rb2D; // 움직일 유닛의 Rigid Body 2D 컴포넌트의 레퍼런스를 저장함
private boxCollider2D boxCollider; // 
private float inverseMoveTime; // 움직임의 효율적 계산. moveTime의 역수, 비효율적인 나누기연산 대신 곱하기 연산을 사용 가능

protected virtual void Start() // protected virtual함수는 자식클래스(inheriting class)가 덮어써서 재정의(override) 할 수 있다
-> MovingObject 클래스를 상속받아 사용할 것이기 때문에 자식클래스가 Start를 다르게 설정하는 것을 용이하게 한다

boxCollider = GetComponent<BoxCollider2D>();
rb2D = GetComponent<RigidBody2D>();
inverseMoveTime = 1 / moveTime;


코루틴
protected IEnumerator SmoothMovement (Vector3 end)// 코루틴. 유닛들을 한 공간에서 다른 곳으로 옮기는데 쓴다.(부드러운 움직임) 움직일 장소 Vector3 end를 파라미터로 받는다

float sqrRemainingDistance = (transform.position - end).sqrMagnitude; // 중요 - 이동할 남은 거리 계산용. 두 벡터의 거리를 크기로 변환해서 float값으로 (Distance보다 연산속도가 빠름) 

while (sqrRemainingDistance > float.Epsilon) // 루프. Epsilon : 0에 가까운 극한
moveTime에 기반해 vector3 end에 적절히 가까운 새로운 위치를 찾는다

Vector3 newPosition = Vector3.MoveTowards (rb2D.position, end, inverseMoveTime * Time.deltaTime); // Vector3.MoveTowards 사용 : MoveTowards : (Vector3 current, Vector3 target, float maxDistanceDelta)로 구성되어 있으며 Moves a point current in a straight line towards a target point.
// 현 위치를 rb2D.position으로 주고, 목표는 Vector3 end, inverseMoveTime을 최대변화량(maxDistanceDelta),(시간단위)으로 준다
newPosition이 이동시킬 포인트이다. 이를 MoveTowards를 사용해서 직선상의 목표 포인트 end로 (inverseMoveTime*Time.deltaTime) 단위 만큼 이동시킨 후 newPosition으로 리턴

rb2D.MovePosition(newPosition); // 이제 포인트(newPosition)를 알았으니 Rigid Body 2D의 MovePosition 함수를 이용해 newPosition으로 움직인다.

sqrRemainingDistance = (transform.position - end).sqrMagnitude; // 이동 했으므로 거리를 다시 계산해야 한다.

yield return null; // 루프를 다시 올라가기 전 다음 프레임을 기다린다(양보한다)


Update() 지운다

protected abstract void OnCantMove <T> (T component) // 일반형(Generic) 입력 T를 T형의 매개변수 component로서 받아온다.
	where T : Component

abstract문은 이를 사용할 것들이 현재 존재하지 않거나, 불완전하게 만들어졌음을 의미한다 (상속한 자식클래스에서 완성하면 된다)
// OnCantMove의 경우는 자식클래스에서 자식클래스의 함수로 Override(덮어쓰기, 재정의)해서 완성할 것이다.
또한, abstract문은 중괄호{}를 사용하지 않는다.

protected bool Move (int xDir, int yDir, out RayCastHit2D hit)
// out은 인자(xDir, yDir)들을 pass-by-reference로 하게 한다. 이 경우에는 Move()가 두 개 이상의 값을 리턴하기 위해 쓴다 : bool값과 RayCastHit2D hit
Vector2 start = transform.position; // 현재 오브젝트의 위치를 저장하는데 사용할 Vector2 start 선언 : transform.position은 Vector3형 3차원 벡터이지만 2차원 벡터로 형변환(implicit, z값은 날아감) 할 수 있다.
Vector2 end = start + new Vector2(xDir, yDir); // Move()를 호출할 때, 받은 방향 값들(xDir, yDir)을 기반으로 끝나는 위치를 계산하는 데 사용

boxCollider.enabled = false; // 해당 오브젝트의 boxCollider을 해제한다. Ray를 사용할 것이기 때문에 자기 자신의 Collider와 부딫히지 않아야 하기 때문

// 이제 리턴 값 중 하나인 hit을 설정 해 준다.
hit = Physics2D.Linecast (start, end, blockingLayer); // Vector2 start부터 Vector2 end까지 라인을 긋고 가져와 LayerMask중 하나인 blockingLayer와 충돌이 있는 지 검사해서 RaycastHit2D 정보인 cast result를 리턴한다

if (hit.transform == null) { // cast result에서 뭔가 부딫쳤는지를  hit.transform의 default값인 null인지 체크해서 확인한다.
StartCoroutine(SmoothMovement (end)); // null이기 때문에 공간은 열려있다. 그러므로 Coroutine SmoothMovement를 실행하며 해당 코루틴의 Vector3 end 입력에 Vector2 end를 넣어줄 것이다. (Vector2 <-> Vector3 형변환)
return true; // 이동할 수 있음을 알리는 bool 정보 true 리턴
}

return false; // null이 아니라면 false 리턴

protected virtual void AttemptMove <T> (int xDir, int yDir) // void를 리턴하고, 일반형 입력 T를 받으며, T는 Component이다.
	where T : Component // 일반형 입력 T는 막혔을 때- Move()의 bool이 false 일 때, 오브젝트가 반응 할 컴포넌트 타입을 가리키기 위해 사용한다.
// enemy에 적용된 경우 상대는 player일 것이고, player일 경우 상대는 wall이다(벽 공격 파괴)
RaycastHit2D hit;
bool canMove = Move (xDir, yDir, out hit); // Move()를 호출하고 인수들을 넘겨준다. 받은 bool 리턴값은 canMove에 저장하고, hit는 AttemptMove()의 hit에 저장한다
// 이동 ? canMove=true : canMove=false

if (hit.transform == null) { // Move()를 호출해 out으로 받은 hit의 transform을 검사할 수 있다.
	return; // 공간이 비어 부딫히지 않았다면 이후 코드를 실행하지 않는다.
}

T hitComponent = hit.transform.GetComponent<T>(); // hit.transform != null 일 시(부딫혔을 시) 충돌한 오브젝트의 transform 컴포넌트 레퍼런스를 가져와 T(Component)타입 hitComponent에 저장한다.

if (!canMove && hitComponent != null) { // 움직이던 오브젝트가 막히고, 상호작용할 수 있는 오브젝트와 충돌했을 시 
	OnCantMove(hitComponent); // OnCantMove()를 호출하고 hitComponent를 인수로 넘겨준다.
}

-> 일반형 매개변수를 사용하는 이유 : player와 enemy가 MovingObject를 상속할텐데, player는 wall과 상호작용 해야하고, enemy는 player와 상호작용 할 수 있어야 한다. 이는 나중에 상호작용할 hitComponent의 종류를 알 수 없다는 얘기다. 
일반형을 사용하여 이들의 레퍼런스를 OnCantMove로 가져와 입력할 수 있고, 이를 상속한 클래스들(enemy, player, wall, etc)의 각각의 구현에 따라 동작하게 할 수 있다.
